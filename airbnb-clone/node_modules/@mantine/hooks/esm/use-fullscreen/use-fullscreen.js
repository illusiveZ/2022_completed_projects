import { useState, useRef, useCallback, useEffect } from 'react';

function getFullscreenElement() {
  const _document = window.document;
  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;
  return fullscreenElement;
}
async function exitFullscreen() {
  const _document = window.document;
  if (typeof _document.exitFullscreen === "function")
    return _document.exitFullscreen();
  if (typeof _document.msExitFullscreen === "function")
    return _document.msExitFullscreen();
  if (typeof _document.webkitExitFullscreen === "function")
    return _document.webkitExitFullscreen();
  if (typeof _document.mozCancelFullScreen === "function")
    return _document.mozCancelFullScreen();
  return null;
}
function useFullscreen() {
  const [fullscreen, setFullscreen] = useState(false);
  const elementRef = useRef();
  const handleFullscreenChange = useCallback((event) => {
    setFullscreen(event.target === getFullscreenElement());
  }, [setFullscreen]);
  const handleFullscreenError = useCallback((event) => {
    setFullscreen(false);
    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);
  }, [setFullscreen]);
  const toggle = useCallback(async () => {
    if (!getFullscreenElement()) {
      await elementRef.current.requestFullscreen();
    } else {
      await exitFullscreen();
    }
  }, []);
  const ref = useCallback((element) => {
    if (elementRef.current) {
      elementRef.current.removeEventListener("fullscreenchange", handleFullscreenChange);
      elementRef.current.removeEventListener("fullscreenerror", handleFullscreenError);
      elementRef.current = null;
    }
    if (element === null) {
      elementRef.current = window.document.documentElement;
    } else {
      elementRef.current = element;
    }
    elementRef.current.addEventListener("fullscreenchange", handleFullscreenChange);
    elementRef.current.addEventListener("fullscreenerror", handleFullscreenError);
  }, []);
  useEffect(() => {
    if (!elementRef.current && window.document) {
      elementRef.current = window.document.documentElement;
      elementRef.current.addEventListener("fullscreenchange", handleFullscreenChange);
      elementRef.current.addEventListener("fullscreenerror", handleFullscreenError);
    }
  }, []);
  return { ref, toggle, fullscreen };
}

export { useFullscreen };
//# sourceMappingURL=use-fullscreen.js.map
