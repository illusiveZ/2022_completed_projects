'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createMemoStyles = require('../../theme/create-memo-styles.js');
var getSizeValue = require('../../theme/utils/get-size-value/get-size-value.js');
var getFocusStyles = require('../../theme/utils/get-focus-styles/get-focus-styles.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var useStyles = createMemoStyles.createMemoStyles({
  colorSwatch: ({ theme, size, radius }) => __spreadProps(__spreadValues({}, getFocusStyles.getFocusStyles(theme)), {
    width: size,
    height: size,
    WebkitTapHighlightColor: "transparent",
    border: 0,
    borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
    appearance: "none",
    WebkitAppearance: "none",
    padding: 0,
    position: "relative",
    overflow: "hidden"
  }),
  overlay: ({ theme, radius }) => ({
    position: "absolute",
    borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }),
  children: {
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center"
  },
  shadowOverlay: {
    boxShadow: "rgba(0, 0, 0, .1) 0px 0px 0px 1px inset, rgb(0, 0, 0, .15) 0px 0px 4px inset",
    zIndex: 1
  },
  alphaOverlay: ({ theme }) => {
    const color = theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3];
    return {
      backgroundImage: `linear-gradient(45deg, ${color} 25%, transparent 25%), linear-gradient(-45deg, ${color} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${color} 75%), linear-gradient(-45deg, ${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white} 75%, ${color} 75%)`,
      backgroundSize: "8px 8px",
      backgroundPosition: "0 0, 0 4px, 4px -4px, -4px 0px"
    };
  }
});

exports.default = useStyles;
//# sourceMappingURL=ColorSwatch.styles.js.map
