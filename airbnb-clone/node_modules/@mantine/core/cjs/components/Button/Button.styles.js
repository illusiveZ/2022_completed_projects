'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Input = require('../Input/Input.js');
var createMemoStyles = require('../../theme/create-memo-styles.js');
var getSizeValue = require('../../theme/utils/get-size-value/get-size-value.js');
var getFontStyles = require('../../theme/utils/get-font-styles/get-font-styles.js');
var getFocusStyles = require('../../theme/utils/get-focus-styles/get-focus-styles.js');
var getSharedColorScheme = require('../../theme/utils/get-shared-color-scheme/get-shared-color-scheme.js');
var getThemeColor = require('../../theme/utils/get-theme-color/get-theme-color.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const sizes = {
  xs: {
    height: Input.INPUT_SIZES.xs,
    padding: [0, 14]
  },
  sm: {
    height: Input.INPUT_SIZES.sm,
    padding: [0, 18]
  },
  md: {
    height: Input.INPUT_SIZES.md,
    padding: [0, 22]
  },
  lg: {
    height: Input.INPUT_SIZES.lg,
    padding: [0, 26]
  },
  xl: {
    height: Input.INPUT_SIZES.xl,
    padding: [0, 32]
  },
  "compact-xs": {
    height: 22,
    padding: [0, 7]
  },
  "compact-sm": {
    height: 26,
    padding: [0, 8]
  },
  "compact-md": {
    height: 30,
    padding: [0, 10]
  },
  "compact-lg": {
    height: 34,
    padding: [0, 12]
  },
  "compact-xl": {
    height: 40,
    padding: [0, 14]
  }
};
const heights = Object.keys(sizes).reduce((acc, size) => {
  acc[size] = sizes[size].height;
  return acc;
}, {});
const getSizeStyles = ({ compact, size }) => {
  if (!compact) {
    return sizes[size];
  }
  return sizes[`compact-${size}`];
};
const getWidthStyles = (fullWidth) => ({
  display: fullWidth ? "block" : "inline-block",
  width: fullWidth ? "100%" : "auto"
});
var useStyles = createMemoStyles.createMemoStyles({
  icon: {
    display: "flex",
    alignItems: "center"
  },
  leftIcon: {
    marginRight: 10
  },
  rightIcon: {
    marginLeft: 10
  },
  inner: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    height: "100%",
    overflow: "visible"
  },
  label: {
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap",
    height: "100%",
    overflow: "hidden"
  },
  root: (props) => __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, getSizeStyles({ compact: props.compact, size: props.size })), getFontStyles.getFontStyles(props.theme)), getFocusStyles.getFocusStyles(props.theme)), getWidthStyles(props.fullWidth)), {
    fontSize: getSizeValue.getSizeValue({ size: props.size, sizes: props.theme.fontSizes }),
    WebkitTapHighlightColor: "transparent",
    userSelect: "none",
    boxSizing: "border-box",
    textDecoration: "none",
    cursor: "pointer",
    appearance: "none",
    WebkitAppearance: "none"
  }),
  outline: ({ color, radius, theme }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ color, theme, variant: "outline" });
    return {
      backgroundColor: colors.background,
      borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
      fontWeight: 600,
      color: colors.color,
      border: `1px solid ${colors.border}`,
      "&:not(:disabled):active": {
        transform: "translateY(1px)"
      },
      "&:disabled": {
        borderColor: "transparent",
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5],
        cursor: "not-allowed"
      }
    };
  },
  light: ({ color, radius, theme }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ color, theme, variant: "light" });
    return {
      borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
      fontWeight: 600,
      border: `1px solid ${colors.border}`,
      backgroundColor: colors.background,
      color: colors.color,
      "&:not(:disabled):active": {
        transform: "translateY(1px)"
      },
      "&:disabled": {
        borderColor: "transparent",
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5],
        textShadow: "none",
        cursor: "not-allowed"
      }
    };
  },
  filled: ({ color, radius, theme }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ color, theme, variant: "filled" });
    return {
      border: `1px solid ${colors.border}`,
      borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
      fontWeight: 600,
      backgroundColor: colors.background,
      color: colors.color,
      textShadow: `1px 1px 0 ${getThemeColor.getThemeColor({ theme, color, shade: 9 })}`,
      "&:not(:disabled):active": {
        transform: "translateY(1px)"
      },
      "&:disabled": {
        borderColor: "transparent",
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5],
        textShadow: "none",
        cursor: "not-allowed"
      }
    };
  },
  link: ({ color, radius, theme }) => ({
    padding: 0,
    borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
    backgroundColor: "transparent",
    border: 0,
    display: "inline-block",
    color: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 3 : 7 }),
    cursor: "pointer",
    height: "auto",
    lineHeight: theme.lineHeight,
    "&:hover": {
      textDecoration: "underline"
    },
    "&:disabled": {
      color: theme.colors.gray[5],
      cursor: "not-allowed",
      "&:hover": {
        textDecoration: "none"
      }
    }
  })
});

exports.default = useStyles;
exports.heights = heights;
//# sourceMappingURL=Button.styles.js.map
