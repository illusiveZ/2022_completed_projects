'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var hooks = require('@mantine/hooks');
var useMantineTheme = require('../../theme/use-mantine-theme/use-mantine-theme.js');

function useTransition({
  duration,
  timingFunction,
  mounted,
  onEnter,
  onExit,
  onEntered,
  onExited,
  themeOverride
}) {
  const theme = useMantineTheme.useMantineTheme(themeOverride);
  const reduceMotion = hooks.useReducedMotion();
  const transitionDuration = reduceMotion ? 0 : duration;
  const [transitionStatus, setStatus] = React.useState(mounted ? "entered" : "exited");
  const timeoutRef = React.useRef(-1);
  const handleStateChange = (shouldMount) => {
    const preHandler = shouldMount ? onEnter : onExit;
    const handler = shouldMount ? onEntered : onExited;
    setStatus(shouldMount ? "pre-entering" : "pre-exiting");
    window.clearTimeout(timeoutRef.current);
    const preStateTimeout = window.setTimeout(() => {
      typeof preHandler === "function" && preHandler();
      setStatus(shouldMount ? "entering" : "exiting");
    }, 10);
    timeoutRef.current = window.setTimeout(() => {
      window.clearTimeout(preStateTimeout);
      typeof handler === "function" && handler();
      setStatus(shouldMount ? "entered" : "exited");
    }, transitionDuration);
  };
  hooks.useDidUpdate(() => {
    handleStateChange(mounted);
  }, [mounted]);
  return {
    transitionDuration,
    transitionStatus,
    transitionTimingFunction: timingFunction || theme.transitionTimingFunction
  };
}

exports.useTransition = useTransition;
//# sourceMappingURL=use-transition.js.map
