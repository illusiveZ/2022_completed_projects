'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createMemoStyles = require('../../theme/create-memo-styles.js');
var getSizeValue = require('../../theme/utils/get-size-value/get-size-value.js');
var getFontStyles = require('../../theme/utils/get-font-styles/get-font-styles.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const sizes = {
  xs: 30,
  sm: 36,
  md: 42,
  lg: 50,
  xl: 60
};
function getVariantStyles({ variant, theme }) {
  if (variant === "default") {
    return {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.white,
      borderWidth: 1,
      borderStyle: "solid",
      borderColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[4],
      transition: "border-color 100ms ease, box-shadow 100ms ease",
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 8 : 5]
      }
    };
  }
  if (variant === "filled") {
    return {
      borderWidth: 1,
      borderStyle: "solid",
      borderColor: "transparent",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1],
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: `${theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 8 : 5]} !important`
      }
    };
  }
  if (variant === "unstyled") {
    return {
      borderWidth: 1,
      borderColor: "transparent",
      borderStyle: "solid",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      backgroundColor: "transparent",
      minHeight: 28,
      outline: 0,
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: "transparent"
      },
      "&:disabled": {
        backgroundColor: "transparent",
        "&:focus, &:focus-within": {
          outline: "none",
          borderColor: "transparent"
        }
      }
    };
  }
  return null;
}
function getInvalidStyles({ invalid, theme }) {
  if (!invalid) {
    return null;
  }
  const color = theme.colors.red[theme.colorScheme === "dark" ? 6 : 7];
  return {
    color,
    borderColor: color,
    "&::placeholder": {
      opacity: 1,
      color
    }
  };
}
var useStyles = createMemoStyles.createMemoStyles({
  root: ({ radius, theme }) => ({
    position: "relative",
    borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius })
  }),
  input: ({ theme, size, multiline, radius, variant, invalid, disabled }) => {
    if (variant === "headless") {
      return {};
    }
    const sizeStyles = variant === "default" || variant === "filled" ? {
      minHeight: getSizeValue.getSizeValue({ size, sizes }),
      paddingLeft: getSizeValue.getSizeValue({ size, sizes }) / 3,
      paddingRight: getSizeValue.getSizeValue({ size, sizes }) / 3,
      borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius })
    } : null;
    const disabledStyles = disabled ? {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
      color: theme.colors.dark[2],
      opacity: 0.6,
      cursor: "not-allowed",
      "&::placeholder": {
        color: theme.colors.dark[2]
      }
    } : null;
    return __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadProps(__spreadValues(__spreadValues({}, getFontStyles.getFontStyles(theme)), getVariantStyles({ variant, theme })), {
      height: multiline ? variant === "unstyled" ? void 0 : "auto" : getSizeValue.getSizeValue({ size, sizes }),
      WebkitTapHighlightColor: "transparent",
      lineHeight: multiline ? theme.lineHeight : `${getSizeValue.getSizeValue({ size, sizes }) - 2}px`,
      appearance: "none",
      resize: "none",
      boxSizing: "border-box",
      fontSize: getSizeValue.getSizeValue({ size, sizes: theme.fontSizes }),
      width: "100%",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      display: "block",
      textAlign: "left"
    }), sizeStyles), disabledStyles), {
      "&:disabled": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
        color: theme.colors.dark[2],
        opacity: 0.6,
        cursor: "not-allowed",
        "&::placeholder": {
          color: theme.colors.dark[2]
        }
      },
      "&::placeholder": {
        opacity: 1,
        userSelect: "none",
        color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
      },
      "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button, &::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration": {
        appearance: "none"
      },
      "&[type=number]": {
        MozAppearance: "textfield"
      }
    }), getInvalidStyles({ invalid, theme }));
  },
  withIcon: ({ size }) => ({
    paddingLeft: getSizeValue.getSizeValue({ size, sizes })
  }),
  icon: ({ theme, size, invalid }) => ({
    pointerEvents: "none",
    position: "absolute",
    left: 0,
    top: 0,
    bottom: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: getSizeValue.getSizeValue({ size, sizes }),
    color: invalid ? theme.colors.red[theme.colorScheme === "dark" ? 6 : 7] : theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6]
  }),
  rightSection: {
    position: "absolute",
    top: 0,
    bottom: 0,
    right: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});

exports.default = useStyles;
exports.sizes = sizes;
//# sourceMappingURL=Input.styles.js.map
