'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createMemoStyles = require('../../theme/create-memo-styles.js');
var getSharedColorScheme = require('../../theme/utils/get-shared-color-scheme/get-shared-color-scheme.js');
var getThemeColor = require('../../theme/utils/get-theme-color/get-theme-color.js');
var getSizeValue = require('../../theme/utils/get-size-value/get-size-value.js');
var getFontStyles = require('../../theme/utils/get-font-styles/get-font-styles.js');
var getFocusStyles = require('../../theme/utils/get-focus-styles/get-focus-styles.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const sizes = {
  xs: 18,
  sm: 22,
  md: 28,
  lg: 34,
  xl: 44
};
var useStyles = createMemoStyles.createMemoStyles({
  filled: ({ theme, color }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ theme, color, variant: "filled" });
    return {
      backgroundColor: colors.background,
      color: colors.color,
      textShadow: `1px 1px 0 ${getThemeColor.getThemeColor({ theme, color, shade: 9 })}`,
      "&:disabled": {
        backgroundColor: getThemeColor.getThemeColor({
          theme,
          color: "gray",
          shade: theme.colorScheme === "dark" ? 8 : 1
        })
      }
    };
  },
  light: ({ theme, color }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ theme, color, variant: "light" });
    return {
      backgroundColor: colors.background,
      color: colors.color,
      "&:disabled": {
        backgroundColor: getThemeColor.getThemeColor({
          theme,
          color: "gray",
          shade: theme.colorScheme === "dark" ? 8 : 1
        })
      }
    };
  },
  hover: ({ theme, color }) => ({
    color: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 4 : 7 }),
    backgroundColor: "transparent",
    "&:not(:disabled):hover": {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : getThemeColor.getThemeColor({ theme, color, shade: 0 })
    }
  }),
  transparent: ({ theme, color }) => ({
    color: getThemeColor.getThemeColor({ theme, color, shade: theme.colorScheme === "dark" ? 5 : 7 }),
    backgroundColor: "transparent"
  }),
  root: ({ radius, theme, size }) => __spreadProps(__spreadValues(__spreadValues({}, getFocusStyles.getFocusStyles(theme)), getFontStyles.getFontStyles(theme)), {
    appearance: "none",
    WebkitAppearance: "none",
    WebkitTapHighlightColor: "transparent",
    border: "1px solid transparent",
    boxSizing: "border-box",
    height: getSizeValue.getSizeValue({ size, sizes }),
    minHeight: getSizeValue.getSizeValue({ size, sizes }),
    width: getSizeValue.getSizeValue({ size, sizes }),
    minWidth: getSizeValue.getSizeValue({ size, sizes }),
    borderRadius: getSizeValue.getSizeValue({ size: radius, sizes: theme.radius }),
    padding: 0,
    lineHeight: 1,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    cursor: "pointer",
    transition: "color 100ms ease, background-color 100ms ease",
    "&:not(:disabled):active": {
      transform: "translateY(1px)"
    },
    "&:disabled": {
      color: theme.colors.gray[theme.colorScheme === "dark" ? 6 : 4],
      cursor: "not-allowed"
    }
  }),
  outline: ({ theme, color }) => {
    const colors = getSharedColorScheme.getSharedColorScheme({ theme, color, variant: "outline" });
    return {
      backgroundColor: colors.background,
      color: colors.color,
      border: `1px solid ${colors.border}`,
      "&:disabled": {
        borderColor: theme.colors.gray[theme.colorScheme === "dark" ? 7 : 3]
      }
    };
  }
});

exports.default = useStyles;
exports.sizes = sizes;
//# sourceMappingURL=ActionIcon.styles.js.map
