import React, { useRef, useState, useEffect } from 'react';
import cx from 'clsx';
import { useFocusTrap } from '@mantine/hooks';
import { Paper } from '../../Paper/Paper.js';
import { Divider } from '../../Divider/Divider.js';
import { Text } from '../../Text/Text.js';
import { MenuItem } from '../MenuItem/MenuItem.js';
import { MenuLabel } from '../MenuLabel/MenuLabel.js';
import { MenuButton } from '../MenuButton/MenuButton.js';
import useStyles from './MenuBody.styles.js';
import { useMantineTheme } from '../../../theme/use-mantine-theme/use-mantine-theme.js';
import { mergeStyles } from '../../../theme/utils/merge-styles/merge-styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function getNextItem(active, items) {
  for (let i = active + 1; i < items.length; i += 1) {
    if (!items[i].props.disabled && items[i].type === MenuItem) {
      return i;
    }
  }
  return active;
}
function findInitialItem(items) {
  for (let i = 0; i < items.length; i += 1) {
    if (!items[i].props.disabled && items[i].type === MenuItem) {
      return i;
    }
  }
  return -1;
}
function getPreviousItem(active, items) {
  for (let i = active - 1; i >= 0; i -= 1) {
    if (!items[i].props.disabled && items[i].type === MenuItem) {
      return i;
    }
  }
  if (!items[active] || items[active].type !== MenuItem) {
    return findInitialItem(items);
  }
  return active;
}
function MenuBody(_a) {
  var _b = _a, {
    className,
    style,
    themeOverride,
    opened,
    onClose,
    children,
    size = "md",
    shadow = "md",
    closeOnItemClick = true,
    transitionDuration = 150,
    classNames,
    styles,
    radius,
    trapFocus = true
  } = _b, others = __objRest(_b, [
    "className",
    "style",
    "themeOverride",
    "opened",
    "onClose",
    "children",
    "size",
    "shadow",
    "closeOnItemClick",
    "transitionDuration",
    "classNames",
    "styles",
    "radius",
    "trapFocus"
  ]);
  const items = React.Children.toArray(children).filter((item) => item.type === MenuItem || item.type === Divider || item.type === MenuLabel);
  const hoveredTimeout = useRef();
  const buttonsRefs = useRef({});
  const theme = useMantineTheme(themeOverride);
  const classes = useStyles({ size, theme }, classNames, "menu");
  const _styles = mergeStyles(classes, styles);
  const [hovered, setHovered] = useState(findInitialItem(items));
  const focusTrapRef = useFocusTrap(trapFocus);
  useEffect(() => {
    if (!opened) {
      hoveredTimeout.current = window.setTimeout(() => {
        setHovered(findInitialItem(items));
      }, transitionDuration);
    } else {
      window.clearTimeout(hoveredTimeout.current);
    }
    return () => window.clearTimeout(hoveredTimeout.current);
  }, [opened]);
  const handleKeyDown = (event) => {
    const { code } = event.nativeEvent;
    if (code === "Escape") {
      onClose();
    }
    if (code === "Tab" && trapFocus) {
      event.preventDefault();
    }
    if (code === "ArrowUp") {
      event.preventDefault();
      const prevIndex = getPreviousItem(hovered, items);
      setHovered(prevIndex);
      buttonsRefs.current[prevIndex].focus();
    }
    if (code === "ArrowDown") {
      event.preventDefault();
      const nextIndex = getNextItem(hovered, items);
      setHovered(nextIndex);
      buttonsRefs.current[nextIndex].focus();
    }
  };
  if (items.length === 0) {
    return null;
  }
  const buttons = items.map((item, index) => {
    if (item.type === MenuItem) {
      return /* @__PURE__ */ React.createElement(MenuButton, __spreadProps(__spreadValues({}, item.props), {
        key: index,
        hovered: hovered === index,
        onHover: () => setHovered(index),
        radius,
        classNames,
        styles,
        onClick: (event) => {
          if (closeOnItemClick) {
            onClose();
          }
          if (typeof item.props.onClick === "function") {
            item.props.onClick(event);
          }
        },
        elementRef: (node) => {
          buttonsRefs.current[index] = node;
        }
      }));
    }
    if (item.type === MenuLabel) {
      return /* @__PURE__ */ React.createElement(Text, __spreadValues({
        key: index,
        className: classes.label,
        style: _styles.label
      }, item.props));
    }
    if (item.type === Divider) {
      return /* @__PURE__ */ React.createElement(Divider, {
        variant: "solid",
        className: classes.divider,
        margins: theme.spacing.xs / 2,
        style: _styles.divider,
        key: index
      });
    }
    return null;
  });
  return /* @__PURE__ */ React.createElement(Paper, __spreadValues({
    shadow,
    className: cx(classes.body, className),
    style: __spreadValues(__spreadValues({}, style), _styles.body),
    onKeyDownCapture: handleKeyDown,
    role: "menu",
    "aria-orientation": "vertical",
    radius,
    onMouseLeave: () => setHovered(-1)
  }, others), /* @__PURE__ */ React.createElement("div", {
    ref: focusTrapRef
  }, buttons));
}
MenuBody.displayName = "@mantine/core/MenuBody";

export { MenuBody };
//# sourceMappingURL=MenuBody.js.map
