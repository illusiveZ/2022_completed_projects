import React from 'react';
import cx from 'clsx';
import useStyles, { THUMB_SIZES } from './Thumb.styles.js';
import { useMantineTheme } from '../../../theme/use-mantine-theme/use-mantine-theme.js';
import { mergeStyles } from '../../../theme/utils/merge-styles/merge-styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function Thumb({
  position,
  themeOverride,
  className,
  styles,
  classNames,
  style,
  size,
  __staticSelector
}) {
  const theme = useMantineTheme(themeOverride);
  const classes = useStyles({ theme, size }, classNames, __staticSelector);
  const _styles = mergeStyles(classes, styles);
  return /* @__PURE__ */ React.createElement("div", {
    className: cx(classes.thumb, className),
    style: __spreadValues(__spreadProps(__spreadValues({}, _styles.thumb), {
      left: `calc(${position.x * 100}% - ${THUMB_SIZES[size] / 2}px)`,
      top: `calc(${position.y * 100}% - ${THUMB_SIZES[size] / 2}px)`
    }), style)
  });
}
Thumb.displayName = "@mantine/core/Thumb";

export { Thumb };
//# sourceMappingURL=Thumb.js.map
