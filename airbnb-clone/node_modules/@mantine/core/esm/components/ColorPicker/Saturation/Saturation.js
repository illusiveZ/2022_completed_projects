import React, { useState, useEffect } from 'react';
import { useMove, clampUseMovePosition } from '@mantine/hooks';
import { Thumb } from '../Thumb/Thumb.js';
import useStyles from './Saturation.styles.js';
import { useMantineTheme } from '../../../theme/use-mantine-theme/use-mantine-theme.js';
import { mergeStyles } from '../../../theme/utils/merge-styles/merge-styles.js';
import { convertHsvaTo } from '../converters/converters.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function Saturation({
  value,
  onChange,
  focusable = true,
  __staticSelector = "saturation",
  size,
  color,
  saturationLabel,
  themeOverride,
  classNames,
  styles
}) {
  const theme = useMantineTheme(themeOverride);
  const classes = useStyles({ theme, size }, classNames, __staticSelector);
  const _styles = mergeStyles(classes, styles);
  const [position, setPosition] = useState({ x: value.s / 100, y: 1 - value.v / 100 });
  const { ref } = useMove(({ x, y }) => {
    onChange({ s: Math.round(x * 100), v: Math.round((1 - y) * 100) });
  });
  useEffect(() => {
    setPosition({ x: value.s / 100, y: 1 - value.v / 100 });
  }, [value.s, value.v]);
  const handleArrow = (event, pos) => {
    event.preventDefault();
    const _position = clampUseMovePosition(pos);
    onChange({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });
  };
  const handleKeyDown = (event) => {
    switch (event.nativeEvent.code) {
      case "ArrowUp": {
        handleArrow(event, { y: position.y - 0.05, x: position.x });
        break;
      }
      case "ArrowDown": {
        handleArrow(event, { y: position.y + 0.05, x: position.x });
        break;
      }
      case "ArrowRight": {
        handleArrow(event, { x: position.x + 0.05, y: position.y });
        break;
      }
      case "ArrowLeft": {
        handleArrow(event, { x: position.x - 0.05, y: position.y });
        break;
      }
    }
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.saturation,
    ref,
    style: __spreadValues({}, _styles.saturation),
    role: "slider",
    "aria-label": saturationLabel,
    "aria-valuenow": position.x,
    "aria-valuetext": convertHsvaTo("rgba", value),
    tabIndex: focusable ? 0 : -1,
    onKeyDown: handleKeyDown
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes.saturationOverlay,
    style: { backgroundColor: `hsl(${value.h}, 100%, 50%)` }
  }), /* @__PURE__ */ React.createElement("div", {
    className: classes.saturationOverlay,
    style: __spreadProps(__spreadValues({}, _styles.saturationOverlay), {
      backgroundImage: "linear-gradient(90deg, #fff, transparent)"
    })
  }), /* @__PURE__ */ React.createElement("div", {
    className: classes.saturationOverlay,
    style: __spreadProps(__spreadValues({}, _styles.saturationOverlay), {
      backgroundImage: "linear-gradient(0deg, #000, transparent)"
    })
  }), /* @__PURE__ */ React.createElement(Thumb, {
    __staticSelector,
    classNames,
    styles,
    themeOverride,
    position,
    className: classes.saturationThumb,
    style: { backgroundColor: color },
    size
  }));
}
Saturation.displayName = "@mantine/core/Saturation";

export { Saturation };
//# sourceMappingURL=Saturation.js.map
