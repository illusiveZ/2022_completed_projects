import React from 'react';
import cx from 'clsx';
import useStyles, { sizes } from './Input.styles.js';
import { useMantineTheme } from '../../theme/use-mantine-theme/use-mantine-theme.js';
import { mergeStyles } from '../../theme/utils/merge-styles/merge-styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const INPUT_VARIANTS = ["default", "filled", "unstyled", "headless"];
const INPUT_SIZES = sizes;
function Input(_a) {
  var _b = _a, {
    component = "input",
    className,
    invalid = false,
    required = false,
    disabled = false,
    variant,
    icon,
    style,
    rightSectionWidth = 36,
    rightSection,
    rightSectionProps = {},
    radius = "sm",
    size = "sm",
    themeOverride,
    wrapperProps,
    elementRef,
    classNames,
    styles,
    __staticSelector = "input",
    multiline = false
  } = _b, others = __objRest(_b, [
    "component",
    "className",
    "invalid",
    "required",
    "disabled",
    "variant",
    "icon",
    "style",
    "rightSectionWidth",
    "rightSection",
    "rightSectionProps",
    "radius",
    "size",
    "themeOverride",
    "wrapperProps",
    "elementRef",
    "classNames",
    "styles",
    "__staticSelector",
    "multiline"
  ]);
  const theme = useMantineTheme(themeOverride);
  const _variant = variant || (theme.colorScheme === "dark" ? "filled" : "default");
  const classes = useStyles({ radius, theme, size, multiline, variant: _variant, invalid, disabled }, classNames, __staticSelector);
  const _styles = mergeStyles(classes, styles);
  const Element = component;
  return /* @__PURE__ */ React.createElement("div", __spreadValues({
    className: cx(classes.root, classes[_variant], className),
    style: __spreadValues(__spreadValues(__spreadValues({}, style), _styles.root), _styles[variant])
  }, wrapperProps), icon && /* @__PURE__ */ React.createElement("div", {
    className: classes.icon,
    style: _styles.icon
  }, icon), /* @__PURE__ */ React.createElement(Element, __spreadProps(__spreadValues({}, others), {
    ref: elementRef,
    "aria-required": required,
    "aria-invalid": invalid,
    className: cx({ [classes.withIcon]: icon }, classes.input),
    disabled,
    style: __spreadValues(__spreadValues({
      paddingRight: rightSection ? rightSectionWidth : theme.spacing.md
    }, _styles.input), icon ? _styles.withIcon : null)
  })), rightSection && /* @__PURE__ */ React.createElement("div", __spreadProps(__spreadValues({}, rightSectionProps), {
    style: __spreadProps(__spreadValues({}, _styles.rightSection), { width: rightSectionWidth }),
    className: classes.rightSection
  }), rightSection));
}
Input.displayName = "@mantine/core/Input";

export { INPUT_SIZES, INPUT_VARIANTS, Input };
//# sourceMappingURL=Input.js.map
