import React, { useState, useRef, useEffect } from 'react';
import { useId, useUncontrolled, useMergedRef } from '@mantine/hooks';
import { InputWrapper } from '../InputWrapper/InputWrapper.js';
import { Input } from '../Input/Input.js';
import { DefaultItem } from './DefaultItem/DefaultItem.js';
import { getSelectRightSectionProps } from './SelectRightSection/get-select-right-section-props.js';
import { SelectItems } from './SelectItems/SelectItems.js';
import { SelectDropdown } from './SelectDropdown/SelectDropdown.js';
import { filterData } from './filter-data/filter-data.js';
import { scrollIntoView } from '../../utils/scroll-into-view/scroll-into-view.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function defaultFilter(value, item) {
  return item.label.toLowerCase().trim().includes(value.toLowerCase().trim());
}
function Select(_a) {
  var _b = _a, {
    className,
    style,
    required = false,
    label,
    id,
    error,
    description,
    size = "sm",
    shadow = "sm",
    data,
    value,
    defaultValue,
    onChange,
    itemComponent = DefaultItem,
    onKeyDown,
    onFocus,
    onBlur,
    transition = "fade",
    transitionDuration = 0,
    initiallyOpened = false,
    transitionTimingFunction,
    wrapperProps,
    elementRef,
    themeOverride,
    classNames,
    styles,
    filter = defaultFilter,
    maxDropdownHeight = 220,
    searchable = false,
    clearable = false,
    nothingFound,
    clearButtonLabel,
    limit = Infinity,
    disabled = false
  } = _b, others = __objRest(_b, [
    "className",
    "style",
    "required",
    "label",
    "id",
    "error",
    "description",
    "size",
    "shadow",
    "data",
    "value",
    "defaultValue",
    "onChange",
    "itemComponent",
    "onKeyDown",
    "onFocus",
    "onBlur",
    "transition",
    "transitionDuration",
    "initiallyOpened",
    "transitionTimingFunction",
    "wrapperProps",
    "elementRef",
    "themeOverride",
    "classNames",
    "styles",
    "filter",
    "maxDropdownHeight",
    "searchable",
    "clearable",
    "nothingFound",
    "clearButtonLabel",
    "limit",
    "disabled"
  ]);
  const [dropdownOpened, setDropdownOpened] = useState(initiallyOpened);
  const [hovered, setHovered] = useState(-1);
  const inputRef = useRef();
  const dropdownRef = useRef();
  const itemsRefs = useRef({});
  const uuid = useId(id);
  const [_value, handleChange, inputMode] = useUncontrolled({
    value,
    defaultValue,
    finalValue: null,
    onChange,
    rule: (val) => typeof val === "string"
  });
  const formattedData = data.map((item) => typeof item === "string" ? { label: item, value: item } : item);
  const selectedValue = formattedData.find((item) => item.value === _value);
  const [inputValue, setInputValue] = useState((selectedValue == null ? void 0 : selectedValue.label) || "");
  const handleClear = () => {
    var _a2;
    handleChange(null);
    if (inputMode === "uncontrolled") {
      setInputValue("");
    }
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  };
  useEffect(() => {
    const newSelectedValue = formattedData.find((item) => item.value === _value);
    if (newSelectedValue) {
      setInputValue(newSelectedValue.label);
    } else {
      setInputValue("");
    }
  }, [_value]);
  const handleItemSelect = (item) => {
    handleChange(item.value);
    setHovered(-1);
    if (inputMode === "uncontrolled") {
      setInputValue(item.label);
    }
    setDropdownOpened(false);
    inputRef.current.focus();
  };
  const filteredData = filterData({
    data: formattedData,
    searchable,
    limit,
    searchValue: inputValue,
    filter
  });
  const handleInputKeydown = (event) => {
    typeof onKeyDown === "function" && onKeyDown(event);
    switch (event.nativeEvent.code) {
      case "ArrowUp": {
        event.preventDefault();
        setDropdownOpened(true);
        setHovered((current) => {
          var _a2;
          const nextIndex = current > 0 ? current - 1 : current;
          scrollIntoView(dropdownRef.current, itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value]);
          return nextIndex;
        });
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        setDropdownOpened(true);
        setHovered((current) => {
          var _a2;
          const nextIndex = current < filteredData.length - 1 ? current + 1 : current;
          scrollIntoView(dropdownRef.current, itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value]);
          return nextIndex;
        });
        break;
      }
      case "Escape": {
        event.preventDefault();
        setDropdownOpened(false);
        setHovered(-1);
        break;
      }
      case "Space": {
        if (!searchable && !dropdownOpened) {
          event.preventDefault();
          setDropdownOpened(true);
          setHovered(0);
        }
        break;
      }
      case "Enter": {
        if (filteredData[hovered]) {
          event.preventDefault();
          handleItemSelect(filteredData[hovered]);
        }
      }
    }
  };
  const handleInputFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    setDropdownOpened(true);
  };
  const handleInputBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    const selected = formattedData.find((item) => item.value === _value);
    setInputValue((selected == null ? void 0 : selected.label) || "");
    setDropdownOpened(false);
  };
  const handleInputChange = (event) => {
    if (clearable && event.currentTarget.value === "") {
      handleChange(null);
      if (inputMode === "uncontrolled") {
        setInputValue("");
      }
    } else {
      setInputValue(event.currentTarget.value);
    }
    setHovered(0);
    setDropdownOpened(true);
  };
  return /* @__PURE__ */ React.createElement(InputWrapper, __spreadValues({
    required,
    id: uuid,
    label,
    error,
    description,
    size,
    className,
    style,
    themeOverride,
    classNames,
    styles,
    __staticSelector: "select"
  }, wrapperProps), /* @__PURE__ */ React.createElement("div", {
    role: "combobox",
    "aria-haspopup": "listbox",
    "aria-owns": `${uuid}-items`,
    "aria-controls": uuid,
    "aria-expanded": dropdownOpened,
    onMouseLeave: () => setHovered(-1),
    tabIndex: -1
  }, /* @__PURE__ */ React.createElement(Input, __spreadValues(__spreadProps(__spreadValues({}, others), {
    type: "text",
    required,
    elementRef: useMergedRef(elementRef, inputRef),
    id: uuid,
    invalid: !!error,
    size,
    onKeyDown: handleInputKeydown,
    themeOverride,
    classNames,
    __staticSelector: "select",
    value: inputValue,
    onChange: handleInputChange,
    "aria-autocomplete": "list",
    "aria-controls": dropdownOpened ? `${uuid}-items` : null,
    "aria-activedescendant": hovered !== -1 ? `${uuid}-${hovered}` : null,
    onClick: () => setDropdownOpened(true),
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    readOnly: !searchable,
    disabled
  }), getSelectRightSectionProps({
    styles: __spreadProps(__spreadValues({}, styles), {
      input: __spreadValues({
        cursor: !searchable ? disabled ? "not-allowed" : "pointer" : void 0
      }, styles == null ? void 0 : styles.input)
    }),
    size,
    shouldClear: clearable && !!selectedValue,
    themeOverride,
    clearButtonLabel,
    onClear: handleClear,
    error
  }))), /* @__PURE__ */ React.createElement(SelectDropdown, {
    themeOverride,
    mounted: dropdownOpened,
    transition,
    transitionDuration,
    transitionTimingFunction,
    uuid,
    shadow,
    maxDropdownHeight,
    classNames,
    styles,
    elementRef: dropdownRef,
    __staticSelector: "select"
  }, /* @__PURE__ */ React.createElement(SelectItems, {
    data: filteredData,
    hovered,
    themeOverride,
    classNames,
    styles,
    isItemSelected: (val) => val === _value,
    uuid,
    __staticSelector: "select",
    onItemHover: setHovered,
    onItemSelect: handleItemSelect,
    itemsRefs,
    itemComponent,
    size,
    nothingFound
  }))));
}
Select.displayName = "@mantine/core/Select";

export { Select, defaultFilter };
//# sourceMappingURL=Select.js.map
