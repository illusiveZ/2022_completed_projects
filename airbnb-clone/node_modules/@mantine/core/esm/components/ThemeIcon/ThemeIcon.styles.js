import { createMemoStyles } from '../../theme/create-memo-styles.js';
import { getSharedColorScheme } from '../../theme/utils/get-shared-color-scheme/get-shared-color-scheme.js';
import { getThemeColor } from '../../theme/utils/get-theme-color/get-theme-color.js';
import { getSizeValue } from '../../theme/utils/get-size-value/get-size-value.js';
import { getFontStyles } from '../../theme/utils/get-font-styles/get-font-styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const sizes = {
  xs: 16,
  sm: 20,
  md: 26,
  lg: 32,
  xl: 40
};
var useStyles = createMemoStyles({
  light: ({ theme, color }) => {
    const colors = getSharedColorScheme({ theme, color, variant: "light" });
    return {
      backgroundColor: colors.background,
      color: colors.color
    };
  },
  filled: ({ theme, color }) => {
    const colors = getSharedColorScheme({ theme, color, variant: "filled" });
    return {
      backgroundColor: colors.background,
      color: colors.color,
      textShadow: `1px 1px 0 ${getThemeColor({ theme, color, shade: 9 })}`
    };
  },
  root: ({ theme, size, radius }) => {
    const iconSize = getSizeValue({ size, sizes });
    return __spreadProps(__spreadValues({}, getFontStyles(theme)), {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      boxSizing: "border-box",
      width: iconSize,
      height: iconSize,
      borderRadius: getSizeValue({ size: radius, sizes: theme.radius })
    });
  }
});

export default useStyles;
export { sizes };
//# sourceMappingURL=ThemeIcon.styles.js.map
