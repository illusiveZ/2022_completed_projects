import React, { useState } from 'react';
import { useUncontrolled } from '@mantine/hooks';
import { validateJson } from './validate-json/validate-json.js';
import { Textarea } from '../Textarea/Textarea.js';
import { useMantineTheme } from '../../theme/use-mantine-theme/use-mantine-theme.js';
import { getSizeValue } from '../../theme/utils/get-size-value/get-size-value.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function JsonInput(_a) {
  var _b = _a, {
    value,
    defaultValue,
    onChange,
    onFocus,
    onBlur,
    error,
    styles,
    formatOnBlur = false,
    size = "sm",
    validationError,
    themeOverride
  } = _b, others = __objRest(_b, [
    "value",
    "defaultValue",
    "onChange",
    "onFocus",
    "onBlur",
    "error",
    "styles",
    "formatOnBlur",
    "size",
    "validationError",
    "themeOverride"
  ]);
  const theme = useMantineTheme(themeOverride);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    rule: (val) => typeof val === "string",
    onChange
  });
  const [valid, setValid] = useState(validateJson(_value));
  const handleFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    setValid(true);
  };
  const handleBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    const isValid = validateJson(event.currentTarget.value);
    formatOnBlur && isValid && event.currentTarget.value.trim() !== "" && setValue(JSON.stringify(JSON.parse(event.currentTarget.value), null, 2));
    setValid(isValid);
  };
  return /* @__PURE__ */ React.createElement(Textarea, __spreadValues({
    themeOverride,
    value: _value,
    onChange: (event) => setValue(event.currentTarget.value),
    onFocus: handleFocus,
    onBlur: handleBlur,
    error: valid ? error : validationError || true,
    __staticSelector: "json-input",
    styles: __spreadProps(__spreadValues({}, styles), {
      input: __spreadProps(__spreadValues({}, styles == null ? void 0 : styles.input), {
        fontFamily: theme.fontFamilyMonospace,
        fontSize: getSizeValue({ size, sizes: theme.fontSizes }) - 2
      })
    })
  }, others));
}
JsonInput.displayName = "@mantine/core/JsonInput";

export { JsonInput };
//# sourceMappingURL=JsonInput.js.map
