import { useState, useRef } from 'react';
import { useReducedMotion, useDidUpdate } from '@mantine/hooks';
import { useMantineTheme } from '../../theme/use-mantine-theme/use-mantine-theme.js';

function useTransition({
  duration,
  timingFunction,
  mounted,
  onEnter,
  onExit,
  onEntered,
  onExited,
  themeOverride
}) {
  const theme = useMantineTheme(themeOverride);
  const reduceMotion = useReducedMotion();
  const transitionDuration = reduceMotion ? 0 : duration;
  const [transitionStatus, setStatus] = useState(mounted ? "entered" : "exited");
  const timeoutRef = useRef(-1);
  const handleStateChange = (shouldMount) => {
    const preHandler = shouldMount ? onEnter : onExit;
    const handler = shouldMount ? onEntered : onExited;
    setStatus(shouldMount ? "pre-entering" : "pre-exiting");
    window.clearTimeout(timeoutRef.current);
    const preStateTimeout = window.setTimeout(() => {
      typeof preHandler === "function" && preHandler();
      setStatus(shouldMount ? "entering" : "exiting");
    }, 10);
    timeoutRef.current = window.setTimeout(() => {
      window.clearTimeout(preStateTimeout);
      typeof handler === "function" && handler();
      setStatus(shouldMount ? "entered" : "exited");
    }, transitionDuration);
  };
  useDidUpdate(() => {
    handleStateChange(mounted);
  }, [mounted]);
  return {
    transitionDuration,
    transitionStatus,
    transitionTimingFunction: timingFunction || theme.transitionTimingFunction
  };
}

export { useTransition };
//# sourceMappingURL=use-transition.js.map
