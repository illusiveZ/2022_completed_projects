import React from 'react';
import cx from 'clsx';
import { getPosition } from '../utils/get-position/get-position.js';
import { isMarkFilled } from './is-mark-filled.js';
import useStyles from './Marks.styles.js';
import { useMantineTheme } from '../../../theme/use-mantine-theme/use-mantine-theme.js';
import { mergeStyles } from '../../../theme/utils/merge-styles/merge-styles.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function Marks({
  marks,
  color,
  size,
  min,
  max,
  value,
  themeOverride,
  classNames,
  styles,
  offset,
  onChange
}) {
  const theme = useMantineTheme(themeOverride);
  const classes = useStyles({ theme, size, color }, classNames, "slider");
  const _styles = mergeStyles(classes, styles);
  const items = marks.map((mark, index) => /* @__PURE__ */ React.createElement("div", {
    className: classes.markWrapper,
    style: __spreadProps(__spreadValues({}, _styles.markWrapper), { left: `${getPosition({ value: mark.value, min, max })}%` }),
    key: index
  }, /* @__PURE__ */ React.createElement("div", {
    style: __spreadValues(__spreadValues({}, _styles.mark), mark.value <= value ? _styles.markFilled : null),
    className: cx(classes.mark, {
      [classes.markFilled]: isMarkFilled({ mark, value, offset })
    })
  }), mark.label && /* @__PURE__ */ React.createElement("div", {
    className: classes.markLabel,
    style: _styles.markLabel,
    onMouseDown: (event) => {
      event.stopPropagation();
      onChange(mark.value);
    },
    onTouchStart: (event) => {
      event.stopPropagation();
      onChange(mark.value);
    }
  }, mark.label)));
  return /* @__PURE__ */ React.createElement("div", null, items);
}
Marks.displayName = "@mantine/core/SliderMarks";

export { Marks };
//# sourceMappingURL=Marks.js.map
