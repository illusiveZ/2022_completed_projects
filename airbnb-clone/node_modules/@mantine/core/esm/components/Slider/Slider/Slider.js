import React, { useState, useRef, useCallback, useEffect } from 'react';
import { useUncontrolled } from '@mantine/hooks';
import { getClientPosition } from '../utils/get-client-position/get-client-position.js';
import { getPosition } from '../utils/get-position/get-position.js';
import { getChangeValue } from '../utils/get-change-value/get-change-value.js';
import { getDragEventsAssigner } from '../utils/get-drag-events-assigner/get-drag-events-assigner.js';
import { Thumb } from '../Thumb/Thumb.js';
import { Track } from '../Track/Track.js';
import { SliderRoot } from '../SliderRoot/SliderRoot.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function Slider(_a) {
  var _b = _a, {
    themeOverride,
    classNames,
    styles,
    color,
    value,
    onChange,
    size = "md",
    radius = "xl",
    min = 0,
    max = 100,
    step = 1,
    defaultValue,
    name,
    marks = [],
    label = (f) => f,
    labelTransition = "skew-down",
    labelTransitionDuration = 150,
    labelTransitionTimingFunction,
    labelAlwaysOn = false,
    thumbLabel = ""
  } = _b, others = __objRest(_b, [
    "themeOverride",
    "classNames",
    "styles",
    "color",
    "value",
    "onChange",
    "size",
    "radius",
    "min",
    "max",
    "step",
    "defaultValue",
    "name",
    "marks",
    "label",
    "labelTransition",
    "labelTransitionDuration",
    "labelTransitionTimingFunction",
    "labelAlwaysOn",
    "thumbLabel"
  ]);
  const [dragging, setDragging] = useState(false);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: 0,
    rule: (val) => typeof val === "number",
    onChange
  });
  const container = useRef();
  const thumb = useRef();
  const start = useRef();
  const offset = useRef();
  const position = getPosition({ value: _value, min, max });
  const _label = typeof label === "function" ? label(_value) : label;
  const handleChange = (val) => {
    if (container.current) {
      const containerWidth = container.current.getBoundingClientRect().width;
      const nextValue = getChangeValue({ value: val, containerWidth, min, max, step });
      setValue(nextValue);
    }
  };
  const onDrag = useCallback((event) => {
    container.current && container.current.focus();
    handleChange(getClientPosition(event) + start.current - offset.current);
  }, []);
  const onDragEnd = useCallback(() => {
    setDragging(false);
  }, []);
  const { assignEvents, removeEvents } = getDragEventsAssigner({
    onDrag,
    onDragEnd
  });
  useEffect(() => removeEvents, []);
  function handleThumbMouseDown(event) {
    if (event.cancelable) {
      event.preventDefault();
      event.stopPropagation();
    }
    start.current = thumb.current.offsetLeft;
    offset.current = getClientPosition(event);
    assignEvents();
  }
  const handleTrackMouseDown = (event) => {
    if (event.cancelable) {
      event.preventDefault();
    }
    const changePosition = getClientPosition(event.nativeEvent);
    const rect = container.current.getBoundingClientRect();
    start.current = changePosition - rect.left;
    offset.current = changePosition;
    assignEvents();
    handleChange(changePosition - rect.left);
  };
  const handleTrackKeydownCapture = (event) => {
    switch (event.nativeEvent.code) {
      case "ArrowUp":
      case "ArrowRight": {
        event.preventDefault();
        thumb.current.focus();
        setValue(Math.min(Math.max(_value + step, min), max));
        break;
      }
      case "ArrowDown":
      case "ArrowLeft": {
        event.preventDefault();
        thumb.current.focus();
        setValue(Math.min(Math.max(_value - step, min), max));
        break;
      }
    }
  };
  return /* @__PURE__ */ React.createElement(SliderRoot, __spreadProps(__spreadValues({}, others), {
    size,
    elementRef: container,
    onTouchStart: handleTrackMouseDown,
    onMouseDown: handleTrackMouseDown,
    onTouchStartCapture: () => setDragging(true),
    onTouchEndCapture: () => setDragging(false),
    onMouseDownCapture: () => setDragging(true),
    onMouseUpCapture: () => setDragging(false),
    onKeyDownCapture: handleTrackKeydownCapture,
    themeOverride,
    classNames,
    styles
  }), /* @__PURE__ */ React.createElement(Track, {
    offset: 0,
    filled: position,
    marks,
    size,
    radius,
    color,
    min,
    max,
    value: _value,
    themeOverride,
    onChange: setValue,
    styles,
    classNames
  }, /* @__PURE__ */ React.createElement(Thumb, {
    max,
    min,
    value: _value,
    position,
    dragging,
    color,
    size,
    label: _label,
    elementRef: thumb,
    onMouseDown: handleThumbMouseDown,
    labelTransition,
    labelTransitionDuration,
    labelTransitionTimingFunction,
    labelAlwaysOn,
    themeOverride,
    classNames,
    styles,
    thumbLabel
  })), /* @__PURE__ */ React.createElement("input", {
    type: "hidden",
    name,
    value: _value
  }));
}
Slider.displayName = "@mantine/core/Slider";

export { Slider };
//# sourceMappingURL=Slider.js.map
