import React from 'react';
import { DefaultProps, MantineNumberSize } from '../../theme';
import { SharedPopperProps } from '../Popper/Popper';
import { MenuBody, MenuBodyProps, MenuBodyStylesNames } from './MenuBody/MenuBody';
import { MenuItem, MenuItemProps } from './MenuItem/MenuItem';
import { MenuLabel, MenuLabelProps } from './MenuLabel/MenuLabel';
import useStyles from './Menu.styles';
export { MenuBody, MenuItem, MenuLabel };
export type { MenuBodyProps, MenuItemProps, MenuLabelProps };
export declare type MenuStylesNames = keyof ReturnType<typeof useStyles> | MenuBodyStylesNames;
export declare const MENU_SIZES: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
export interface MenuProps extends DefaultProps<MenuStylesNames>, SharedPopperProps, React.ComponentPropsWithoutRef<'div'> {
    /** <MenuItem /> and <Divider /> components only, children are passed to MenuBody component  */
    children: React.ReactNode;
    /** React element that will be used as menu control */
    control?: React.ReactElement;
    /** Use opened and onClose props to setup controlled menu */
    opened?: boolean;
    /** Called every time menu is closed */
    onClose?(): void;
    /** Called every time menu is opened */
    onOpen?(): void;
    /** Menu button aria-label and title props */
    menuButtonLabel?: string;
    /** MenuBody component props */
    menuBodyProps?: Record<string, any>;
    /** Predefined menu width or number for width in px */
    size?: MantineNumberSize;
    /** Predefined shadow from theme or box-shadow value */
    shadow?: string;
    /** Should menu close on item click */
    closeOnItemClick?: boolean;
    /** Id attribute of menu */
    menuId?: string;
    /** Control prop to get element ref */
    controlRefProp?: string;
    /** Menu body z-index */
    zIndex?: number;
    /** Get control ref */
    elementRef?: React.ForwardedRef<HTMLButtonElement>;
    /** Event which should open menu */
    trigger?: 'click' | 'hover';
    /** Close delay for hover trigger */
    delay?: number;
    /** Menu body and items border-radius */
    radius?: MantineNumberSize;
    /** Close menu on scroll */
    closeOnScroll?: boolean;
    /** Trap focus inside menu */
    trapFocus?: boolean;
}
export declare function Menu({ control, children, onClose, onOpen, opened, themeOverride, style, menuId, menuBodyProps, closeOnItemClick, transitionDuration, size, shadow, position, placement, gutter, withArrow, transition, transitionTimingFunction, menuButtonLabel, controlRefProp, trigger, radius, delay, zIndex, elementRef, classNames, styles, closeOnScroll, trapFocus, onMouseLeave, onMouseEnter, onChange, ...others }: MenuProps): JSX.Element;
export declare namespace Menu {
    var displayName: string;
}
//# sourceMappingURL=Menu.d.ts.map